{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","star-wars/tests/helpers/arena-service-helper.js","star-wars/tests/helpers/setup-people-component-data-helper.js","star-wars/tests/helpers/setup-starships-component-data-helper.js","star-wars/tests/integration/components/people-component/component-test.js","star-wars/tests/integration/components/starship-component/component-test.js","star-wars/tests/lint/app.lint-test.js","star-wars/tests/lint/templates.template.lint-test.js","star-wars/tests/lint/tests.lint-test.js","star-wars/tests/test-helper.js","star-wars/tests/unit/adapters/application-test.js","star-wars/tests/unit/adapters/starship-test.js","star-wars/tests/unit/components/battlefield-component-test.js","star-wars/tests/unit/components/people-component-test.js","star-wars/tests/unit/components/starships-component-test.js","star-wars/tests/unit/models/starship-test.js","star-wars/tests/unit/routes/star-wars-test.js","star-wars/tests/unit/serializers/application-test.js","star-wars/tests/unit/serializers/people-test.js","star-wars/tests/unit/serializers/starships-test.js","star-wars/tests/unit/services/arena-results-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"star-wars/tests/helpers/arena-service-helper\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.mockArenaService = mockArenaService;\n\n  function mockArenaService() {\n    return Ember.Service.extend({\n      BulgariaScore: 0,\n      EnglandScore: 0,\n\n      incrementEnglandScore() {\n        this.EnglandScore++;\n      },\n\n      incrementBulgariaScore() {\n        this.BulgariaScore++;\n      }\n\n    });\n  }\n});","define(\"star-wars/tests/helpers/setup-people-component-data-helper\", [\"exports\", \"star-wars/tests/helpers/arena-service-helper\"], function (_exports, _arenaServiceHelper) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.setupPeople = setupPeople;\n  var arenaStub = (0, _arenaServiceHelper.mockArenaService)();\n\n  function setupPeople() {\n    return {\n      setupData: function (context, left, right) {\n        let leftOpponent = {\n          id: 1,\n          name: 'Some name',\n          height: 170,\n          mass: 22\n        };\n        let rightOpponent = {\n          id: 2,\n          name: 'Some other name',\n          height: 171,\n          mass: 24\n        };\n        Object.assign(leftOpponent, left);\n        Object.assign(rightOpponent, right);\n        context.setProperties({\n          leftOpponent: Ember.Object.create(leftOpponent),\n          rightOpponent: Ember.Object.create(rightOpponent)\n        });\n      },\n      setupArenaService: function (context) {\n        context.owner.register('service:arena-results-service', arenaStub);\n      }\n    };\n  }\n});","define(\"star-wars/tests/helpers/setup-starships-component-data-helper\", [\"exports\", \"star-wars/tests/helpers/arena-service-helper\"], function (_exports, _arenaServiceHelper) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.setupStarships = setupStarships;\n  var arenaStub = (0, _arenaServiceHelper.mockArenaService)();\n\n  function setupStarships() {\n    return {\n      setupData: function (context, left, right) {\n        let leftOpponent = {\n          id: 1,\n          name: 'Some name',\n          crew: 11,\n          passengers: 22\n        };\n        let rightOpponent = {\n          id: 2,\n          name: 'Some other name',\n          crew: 13,\n          passengers: 24\n        };\n        Object.assign(leftOpponent, left);\n        Object.assign(rightOpponent, right);\n        context.setProperties({\n          leftOpponent: Ember.Object.create(leftOpponent),\n          rightOpponent: Ember.Object.create(rightOpponent)\n        });\n      },\n      setupArenaService: function (context) {\n        context.owner.register('service:arena-results-service', arenaStub);\n      }\n    };\n  }\n});","define(\"star-wars/tests/integration/components/people-component/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"star-wars/tests/helpers/setup-people-component-data-helper\"], function (_qunit, _emberQunit, _testHelpers, _setupPeopleComponentDataHelper) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | people-component', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      let peopleData = (0, _setupPeopleComponentDataHelper.setupPeople)();\n      peopleData.setupArenaService(this);\n      peopleData.setupData(this);\n    });\n    (0, _qunit.test)('it will render with the proper values inside the template', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"hPzz7Woi\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"people-component\\\",null,[[\\\"leftOpponent\\\",\\\"rightOpponent\\\"],[[23,[\\\"leftOpponent\\\"]],[23,[\\\"rightOpponent\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      var cards = this.element.querySelectorAll('.card');\n      var leftOpponent = cards[0];\n      var rightOpponent = cards[1];\n      var results = {\n        leftOpponent: {\n          name: leftOpponent.querySelector('.card-title').textContent,\n          height: leftOpponent.querySelector('.list-group .list-group-item:nth-of-type(1)').textContent,\n          mass: leftOpponent.querySelector('.list-group .list-group-item:nth-of-type(2)').textContent\n        },\n        rightOpponent: {\n          name: rightOpponent.querySelector('.card-title').textContent,\n          height: rightOpponent.querySelector('.list-group .list-group-item:nth-of-type(1)').textContent,\n          mass: rightOpponent.querySelector('.list-group .list-group-item:nth-of-type(2)').textContent\n        }\n      };\n      assert.equal(results.leftOpponent.name, 'Name: Some name', `name should be 'Some name' but it was ${results.leftOpponent.name}`);\n      assert.equal(results.leftOpponent.height, 'height: 170', `height should be 170 but it was ${results.leftOpponent.height}`);\n      assert.equal(results.leftOpponent.mass, 'mass: 22', `mass should be 22 but it was ${results.leftOpponent.passengers}`);\n      assert.equal(results.rightOpponent.name, 'Name: Some other name', `name should be 'Some name' but it was ${results.rightOpponent.name}`);\n      assert.equal(results.rightOpponent.height, 'height: 171', `height should be 171 but it was ${results.rightOpponent.height}`);\n      assert.equal(results.rightOpponent.mass, 'mass: 24', `mass should be 24 but it was ${results.rightOpponent.passengers}`);\n    });\n  });\n});","define(\"star-wars/tests/integration/components/starship-component/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"star-wars/tests/helpers/setup-starships-component-data-helper\"], function (_qunit, _emberQunit, _testHelpers, _setupStarshipsComponentDataHelper) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | starships-component', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      let starshipsData = (0, _setupStarshipsComponentDataHelper.setupStarships)();\n      starshipsData.setupArenaService(this);\n      starshipsData.setupData(this);\n    });\n    (0, _qunit.test)('it will render with the proper values inside the template', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"kMCSjxDd\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"starships-component\\\",null,[[\\\"leftOpponent\\\",\\\"rightOpponent\\\"],[[23,[\\\"leftOpponent\\\"]],[23,[\\\"rightOpponent\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      var cards = this.element.querySelectorAll('.card');\n      var leftOpponent = cards[0];\n      var rightOpponent = cards[1];\n      var results = {\n        leftOpponent: {\n          name: leftOpponent.querySelector('.card-title').textContent,\n          crew: leftOpponent.querySelector('.list-group .list-group-item:nth-of-type(1)').textContent,\n          passengers: leftOpponent.querySelector('.list-group .list-group-item:nth-of-type(2)').textContent\n        },\n        rightOpponent: {\n          name: rightOpponent.querySelector('.card-title').textContent,\n          crew: rightOpponent.querySelector('.list-group .list-group-item:nth-of-type(1)').textContent,\n          passengers: rightOpponent.querySelector('.list-group .list-group-item:nth-of-type(2)').textContent\n        }\n      };\n      assert.equal(results.leftOpponent.name, 'Name: Some name', `name should be 'Some name' but it was ${results.leftOpponent.name}`);\n      assert.equal(results.leftOpponent.crew, 'crew: 11', `crew size should 11 but it was ${results.leftOpponent.crew}`);\n      assert.equal(results.leftOpponent.passengers, 'passengers: 22', `there should be 22 passengers but they were ${results.leftOpponent.passengers}`);\n      assert.equal(results.rightOpponent.name, 'Name: Some other name', `name should be 'Some name' but it was ${results.rightOpponent.name}`);\n      assert.equal(results.rightOpponent.crew, 'crew: 13', `crew size should 11 but it was ${results.rightOpponent.crew}`);\n      assert.equal(results.rightOpponent.passengers, 'passengers: 24', `there should be 22 passengers but they were ${results.rightOpponent.passengers}`);\n    });\n  });\n});","define(\"star-wars/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('adapters/people.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/people.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('adapters/starship.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/starship.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/battlefield-component/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/battlefield-component/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/people-component/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/people-component/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/starships-component/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/starships-component/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/people.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/people.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/starship.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/starship.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/star-wars.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/star-wars.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/arena-results.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/arena-results.js should pass ESLint\\n\\n');\n  });\n});","define(\"star-wars/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('star-wars/components/battlefield-component/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'star-wars/components/battlefield-component/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('star-wars/components/people-component/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'star-wars/components/people-component/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('star-wars/components/starships-component/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'star-wars/components/starships-component/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('star-wars/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'star-wars/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('star-wars/templates/star-wars.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'star-wars/templates/star-wars.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"star-wars/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('helpers/arena-service-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/arena-service-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/setup-people-component-data-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/setup-people-component-data-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/setup-starships-component-data-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/setup-starships-component-data-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/people-component/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/people-component/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/starship-component/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/starship-component/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/starship-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/starship-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/components/battlefield-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/battlefield-component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/components/people-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/people-component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/components/starships-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/starships-component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/starship-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/starship-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/star-wars-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/star-wars-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/serializers/people-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/people-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/serializers/starships-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/starships-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/arena-results-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/arena-results-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"star-wars/tests/test-helper\", [\"star-wars/app\", \"star-wars/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"star-wars/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"star-wars/tests/unit/adapters/starship-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | starship', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:starship');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"star-wars/tests/unit/components/battlefield-component-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Component | battlefield-component', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let component = this.owner.factoryFor('component:battlefield-component').create();\n      assert.ok(component);\n    });\n  });\n});","define(\"star-wars/tests/unit/components/people-component-test\", [\"qunit\", \"ember-qunit\", \"star-wars/tests/helpers/setup-people-component-data-helper\"], function (_qunit, _emberQunit, _setupPeopleComponentDataHelper) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Component | people-component', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      let peopleData = (0, _setupPeopleComponentDataHelper.setupPeople)();\n      peopleData.setupData(this);\n      peopleData.setupArenaService(this);\n    });\n    (0, _qunit.test)('if setBattleResults will set the proper values', function (assert) {\n      let component = this.owner.factoryFor('component:people-component').create();\n      let peopleData = (0, _setupPeopleComponentDataHelper.setupPeople)();\n      let results = {\n        BulgariaScoreInitialValue: component.get('arenaResults.BulgariaScore'),\n        EnglandScoreInitialValue: component.get('arenaResults.EnglandScore'),\n        resultAfterFirstCall: {},\n        // left opponent with higher score\n        resultAfterSecondCall: {},\n        // right opponent with higher score\n        resultAfterThirdCall: {},\n        // equal score\n        noOpponentResult: null\n      };\n      peopleData.setupData(component, {\n        mass: 140\n      }, {\n        mass: 130\n      });\n      component.setBattleResult();\n      results.resultAfterFirstCall.leftOpponent = component.get('arenaResults.EnglandScore');\n      results.resultAfterFirstCall.rightOpponent = component.get('arenaResults.BulgariaScore');\n      peopleData.setupData(component, {\n        mass: 140\n      }, {\n        mass: 150\n      });\n      component.setBattleResult();\n      results.resultAfterSecondCall.leftOpponent = component.get('arenaResults.EnglandScore');\n      results.resultAfterSecondCall.rightOpponent = component.get('arenaResults.BulgariaScore');\n      peopleData.setupData(component, {\n        mass: 140\n      }, {\n        mass: 140\n      });\n      component.setBattleResult();\n      results.resultAfterThirdCall.leftOpponent = component.get('arenaResults.EnglandScore');\n      results.resultAfterThirdCall.rightOpponent = component.get('arenaResults.BulgariaScore');\n      component.set('leftOpponent', null);\n      results.noOpponentResult = component.setBattleResult();\n      assert.equal(results.BulgariaScoreInitialValue, 0, `The initial value of BulgariaScore should be 0 but it was ${results.BulgariaScoreInitialValue}`);\n      assert.equal(results.EnglandScoreInitialValue, 0, `The initial value of EnglandScore should be 0 but it was ${results.EnglandScoreInitialValue}`);\n      assert.equal(results.resultAfterFirstCall.leftOpponent, 1, `The value of EnglandScore after the first call should be 1 but it was ${results.resultAfterFirstCall.leftOpponent}`);\n      assert.equal(results.resultAfterFirstCall.rightOpponent, 0, `The value of BulgariaScore after the first call should be 0 but it was ${results.resultAfterFirstCall.rightOpponent}`);\n      assert.equal(results.resultAfterSecondCall.leftOpponent, 1, `The value of EnglandScore after the second call should be 1 but it was ${results.resultAfterSecondCall.leftOpponent}`);\n      assert.equal(results.resultAfterSecondCall.rightOpponent, 1, `The value of BulgariaScore after the second call should be 1 but it was ${results.resultAfterSecondCall.rightOpponent}`);\n      assert.equal(results.resultAfterThirdCall.leftOpponent, 2, `The value of EnglandScore after the third call should be 2 but it was ${results.resultAfterThirdCall.leftOpponent}`);\n      assert.equal(results.resultAfterThirdCall.rightOpponent, 2, `The value of BulgariaScore after the third call should be 2 but it was ${results.resultAfterThirdCall.rightOpponent}`);\n      assert.notOk(results.noOpponentResult, `setBattleResults() should return false if there is no data instead it returned ${results.noOpponentResult}`);\n    });\n  });\n});","define(\"star-wars/tests/unit/components/starships-component-test\", [\"qunit\", \"ember-qunit\", \"star-wars/tests/helpers/setup-starships-component-data-helper\"], function (_qunit, _emberQunit, _setupStarshipsComponentDataHelper) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Component | starships-component', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      let starshipsData = (0, _setupStarshipsComponentDataHelper.setupStarships)();\n      starshipsData.setupData(this);\n      starshipsData.setupArenaService(this);\n    });\n    (0, _qunit.test)('if setBattleResults will set the proper values', function (assert) {\n      let component = this.owner.factoryFor('component:starships-component').create();\n      let starshipsData = (0, _setupStarshipsComponentDataHelper.setupStarships)();\n      let results = {\n        BulgariaScoreInitialValue: component.get('arenaResults.BulgariaScore'),\n        EnglandScoreInitialValue: component.get('arenaResults.EnglandScore'),\n        resultAfterFirstCall: {},\n        // left opponent with higher score\n        resultAfterSecondCall: {},\n        // right opponent with higher score\n        resultAfterThirdCall: {},\n        // equal score\n        noOpponentResult: null\n      };\n      starshipsData.setupData(component, {\n        crew: 140\n      }, {\n        crew: 130\n      });\n      component.setBattleResult();\n      results.resultAfterFirstCall.leftOpponent = component.get('arenaResults.EnglandScore');\n      results.resultAfterFirstCall.rightOpponent = component.get('arenaResults.BulgariaScore');\n      starshipsData.setupData(component, {\n        crew: 140\n      }, {\n        crew: 150\n      });\n      component.setBattleResult();\n      results.resultAfterSecondCall.leftOpponent = component.get('arenaResults.EnglandScore');\n      results.resultAfterSecondCall.rightOpponent = component.get('arenaResults.BulgariaScore');\n      starshipsData.setupData(component, {\n        crew: 140\n      }, {\n        crew: 140\n      });\n      component.setBattleResult();\n      results.resultAfterThirdCall.leftOpponent = component.get('arenaResults.EnglandScore');\n      results.resultAfterThirdCall.rightOpponent = component.get('arenaResults.BulgariaScore');\n      component.set('leftOpponent', null);\n      results.noOpponentResult = component.setBattleResult();\n      assert.equal(results.BulgariaScoreInitialValue, 0, `The initial value of BulgariaScore should be 0 but it was ${results.BulgariaScoreInitialValue}`);\n      assert.equal(results.EnglandScoreInitialValue, 0, `The initial value of EnglandScore should be 0 but it was ${results.EnglandScoreInitialValue}`);\n      assert.equal(results.resultAfterFirstCall.leftOpponent, 1, `The value of EnglandScore after the first call should be 1 but it was ${results.resultAfterFirstCall.leftOpponent}`);\n      assert.equal(results.resultAfterFirstCall.rightOpponent, 0, `The value of BulgariaScore after the first call should be 0 but it was ${results.resultAfterFirstCall.rightOpponent}`);\n      assert.equal(results.resultAfterSecondCall.leftOpponent, 1, `The value of EnglandScore after the second call should be 1 but it was ${results.resultAfterSecondCall.leftOpponent}`);\n      assert.equal(results.resultAfterSecondCall.rightOpponent, 1, `The value of BulgariaScore after the second call should be 1 but it was ${results.resultAfterSecondCall.rightOpponent}`);\n      assert.equal(results.resultAfterThirdCall.leftOpponent, 2, `The value of EnglandScore after the third call should be 2 but it was ${results.resultAfterThirdCall.leftOpponent}`);\n      assert.equal(results.resultAfterThirdCall.rightOpponent, 2, `The value of BulgariaScore after the third call should be 2 but it was ${results.resultAfterThirdCall.rightOpponent}`);\n      assert.notOk(results.noOpponentResult, `setBattleResults() should return false if there is no data instead it returned ${results.noOpponentResult}`);\n    });\n  });\n});","define(\"star-wars/tests/unit/models/starship-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | starship', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('starship', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"star-wars/tests/unit/routes/star-wars-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | star-wars', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:star-wars');\n      assert.ok(route);\n    });\n  });\n});","define(\"star-wars/tests/unit/serializers/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Serializer | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('application');\n      assert.ok(serializer);\n    });\n  });\n});","define(\"star-wars/tests/unit/serializers/people-test\", [\"ember-qunit\", \"pretender\"], function (_emberQunit, _pretender) {\n  \"use strict\";\n\n  var server,\n      response = {\n    results: [{\n      name: \"Tubby\",\n      url: 'https://swapi.co/people/1'\n    }, {\n      name: \"Spot\",\n      url: 'https://swapi.co/people/12'\n    }, {\n      name: \"Chestnut\",\n      url: 'https://swapi.co/people/23'\n    }]\n  };\n  (0, _emberQunit.moduleForModel)('people', 'Unit | Serializer | people', {\n    needs: ['serializer:application'],\n\n    beforeEach() {\n      server = new _pretender.default(function () {\n        this.get('people', function () {\n          return [200, {\n            \"Content-Type\": \"application/json\"\n          }, JSON.stringify(response)];\n        });\n      });\n    },\n\n    afterEach() {\n      server.shutdown();\n    }\n\n  });\n  (0, _emberQunit.test)('it serializes array responses', function (assert) {\n    return this.store().findAll('people').then(people => {\n      assert.equal(people.get('length'), 3);\n      assert.equal(people.objectAt(0).get('id'), 1, `object id should be 1 but it was ${people.objectAt(0).get('id')}`);\n      assert.equal(people.objectAt(1).get('id'), 12, `object id should be 12 but it was ${people.objectAt(0).get('id')}`);\n      assert.equal(people.objectAt(2).get('id'), 23, `object id should be 23 but it was ${people.objectAt(0).get('id')}`);\n    });\n  });\n});","define(\"star-wars/tests/unit/serializers/starships-test\", [\"ember-qunit\", \"pretender\"], function (_emberQunit, _pretender) {\n  \"use strict\";\n\n  var server,\n      response = {\n    results: [{\n      name: \"Tubby\",\n      url: 'https://swapi.co/starships/11'\n    }, {\n      name: \"Spot\",\n      url: 'https://swapi.co/starships/32'\n    }, {\n      name: \"Chestnut\",\n      url: 'https://swapi.co/starships/43'\n    }]\n  };\n  (0, _emberQunit.moduleForModel)('starship', 'Unit | Serializer | starship', {\n    needs: ['serializer:application'],\n\n    beforeEach() {\n      server = new _pretender.default(function () {\n        this.get('starships', function () {\n          return [200, {\n            \"Content-Type\": \"application/json\"\n          }, JSON.stringify(response)];\n        });\n      });\n    },\n\n    afterEach() {\n      server.shutdown();\n    }\n\n  });\n  (0, _emberQunit.test)('it serializes array responses', function (assert) {\n    return this.store().findAll('starship').then(starships => {\n      assert.equal(starships.get('length'), 3);\n      assert.equal(starships.objectAt(0).get('id'), 11, `object id should be 1 but it was ${starships.objectAt(0).get('id')}`);\n      assert.equal(starships.objectAt(1).get('id'), 32, `object id should be 12 but it was ${starships.objectAt(0).get('id')}`);\n      assert.equal(starships.objectAt(2).get('id'), 43, `object id should be 23 but it was ${starships.objectAt(0).get('id')}`);\n    });\n  });\n});","define(\"star-wars/tests/unit/services/arena-results-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | arena-results', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it can increment Bulgaria score', function (assert) {\n      const originalValue = 46;\n      const expectedResult = originalValue + 1;\n      let service = this.owner.lookup('service:arena-results');\n      service.BulgariaScore = originalValue;\n      service.incrementBulgariaScore();\n      assert.equal(service.BulgariaScore, expectedResult, `BulgariaScore should be ${expectedResult} but it was ${service.BulgariaScore}`);\n    });\n    (0, _qunit.test)('it can increment England score', function (assert) {\n      const originalValue = 32;\n      const expectedResult = originalValue + 1;\n      let service = this.owner.lookup('service:arena-results');\n      service.EnglandScore = originalValue;\n      service.incrementEnglandScore();\n      assert.equal(service.EnglandScore, expectedResult, `BulgarianScore should be ${service.EnglandScore} but it was ${service.EnglandScore}`);\n    });\n  });\n});","define('star-wars/config/environment', [], function() {\n  var prefix = 'star-wars';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('star-wars/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}