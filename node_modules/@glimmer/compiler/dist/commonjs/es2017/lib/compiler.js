'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.defaultId = undefined;
exports.precompile = precompile;

var _syntax = require('@glimmer/syntax');

var _templateCompiler = require('./template-compiler');

var _templateCompiler2 = _interopRequireDefault(_templateCompiler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultId = exports.defaultId = (() => {
    if (typeof require === 'function') {
        try {
            /* tslint:disable:no-require-imports */
            const crypto = require('crypto');
            /* tslint:enable:no-require-imports */
            let idFn = src => {
                let hash = crypto.createHash('sha1');
                hash.update(src, 'utf8');
                // trim to 6 bytes of data (2^48 - 1)
                return hash.digest('base64').substring(0, 8);
            };
            idFn('test');
            return idFn;
        } catch (e) {}
    }
    return function idFn() {
        return null;
    };
})();
const defaultOptions = {
    id: defaultId,
    meta: {}
};
function precompile(string, options = defaultOptions) {
    let ast = (0, _syntax.preprocess)(string, options);
    let { meta } = options;
    let { block } = _templateCompiler2.default.compile(ast, options);
    let idFn = options.id || defaultId;
    let blockJSON = JSON.stringify(block.toJSON());
    let templateJSONObject = {
        id: idFn(JSON.stringify(meta) + blockJSON),
        block: blockJSON,
        meta: meta
    };
    // JSON is javascript
    return JSON.stringify(templateJSONObject);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9jb21waWxlci9saWIvY29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O1FBaUVnQixBQUFVOztBQWpFMUIsQUFBTyxBQUFFLEFBQVUsQUFBRSxBQUFNLEFBQWlCLEFBQUM7O0FBQzdDLEFBQU8sQUFBb0MsQUFBTSxBQUFxQixBQUFDLEFBbUJ2RSxBQUFNOzs7Ozs7TUFBTyxBQUFTLGlDQUFrQixBQUFHLEFBQUUsTUFDM0M7UUFBSSxPQUFPLEFBQU8sWUFBSyxBQUFVLFlBQUUsQUFDakM7WUFBSSxBQUNGLEFBQXVDO0FBQ3ZDO2tCQUFNLEFBQU0sU0FBRyxBQUFPLFFBQUMsQUFBUSxBQUFDLEFBQUMsQUFDakMsQUFBc0M7QUFFdEM7Z0JBQUksQUFBSSxPQUFpQixBQUFHLEFBQUMsQUFBRSxPQUM3QjtvQkFBSSxBQUFJLE9BQUcsQUFBTSxPQUFDLEFBQVUsV0FBQyxBQUFNLEFBQUMsQUFBQyxBQUNyQyxBQUFJO3FCQUFDLEFBQU0sT0FBQyxBQUFHLEtBQUUsQUFBTSxBQUFDLEFBQUMsQUFDekIsQUFBcUM7QUFDckM7dUJBQU8sQUFBSSxLQUFDLEFBQU0sT0FBQyxBQUFRLEFBQUMsVUFBQyxBQUFTLFVBQUMsQUFBQyxHQUFFLEFBQUMsQUFBQyxBQUFDLEFBQy9DLEFBQUMsQUFBQztBQUVGLEFBQUk7aUJBQUMsQUFBTSxBQUFDLEFBQUMsQUFFYjttQkFBTyxBQUFJLEFBQUMsQUFDYjtVQUFDLE9BQU8sQUFBQyxHQUFFLEFBQUUsQ0FDZjtBQUVEO1dBQU8sU0FBUyxBQUFJLE9BQ2xCO2VBQU8sQUFBSSxBQUFDLEFBQ2QsQUFBQyxBQUFDLEFBQ0o7QUFBQyxBQUFDLEFBQUUsQUFBQztBQXZCRSxBQUFnQztBQXlCdkMsTUFBTSxBQUFjO1FBQ2QsQUFBUyxBQUNiLEFBQUk7VUFGb0MsQUFFbEMsQUFBRSxBQUNULEFBQUMsQUFpQkYsQUFBTTtBQW5CSixBQUFFO29CQW9CRixBQUFjLFFBQ2QsVUFBNkIsQUFBYyxnQkFFM0M7UUFBSSxBQUFHLE1BQUcsQUFBVSx3QkFBQyxBQUFNLFFBQUUsQUFBTyxBQUFDLEFBQUMsQUFDdEM7UUFBSSxFQUFFLEFBQUksQUFBRSxTQUFHLEFBQU8sQUFBQyxBQUN2QjtRQUFJLEVBQUUsQUFBSyxBQUFFLFVBQUcsQUFBZ0IsMkJBQUMsQUFBTyxRQUFDLEFBQUcsS0FBRSxBQUFPLEFBQUMsQUFBQyxBQUN2RDtRQUFJLEFBQUksT0FBRyxBQUFPLFFBQUMsQUFBRSxNQUFJLEFBQVMsQUFBQyxBQUNuQztRQUFJLEFBQVMsWUFBRyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQUssTUFBQyxBQUFNLEFBQUUsQUFBQyxBQUFDLEFBQy9DO1FBQUksQUFBa0I7WUFDaEIsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBSSxBQUFDLFFBQUcsQUFBUyxBQUFDLEFBQzFDLEFBQUs7ZUFBRSxBQUFTLEFBQ2hCLEFBQUk7Y0FIa0UsQUFHaEUsQUFBb0IsQUFDM0IsQUFBQyxBQUVGLEFBQXFCO0FBTG5CLEFBQUU7QUFNSjtXQUFPLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBa0IsQUFBQyxBQUFDLEFBQzVDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmVwcm9jZXNzIH0gZnJvbSAnQGdsaW1tZXIvc3ludGF4JztcbmltcG9ydCBUZW1wbGF0ZUNvbXBpbGVyLCB7IENvbXBpbGVPcHRpb25zIH0gZnJvbSAnLi90ZW1wbGF0ZS1jb21waWxlcic7XG5pbXBvcnQge1xuICBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrLFxuICBUZW1wbGF0ZUphdmFzY3JpcHQsXG4gIFRlbXBsYXRlTWV0YSxcbn0gZnJvbSAnQGdsaW1tZXIvd2lyZS1mb3JtYXQnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBQcmVwcm9jZXNzT3B0aW9ucyB9IGZyb20gJ0BnbGltbWVyL3N5bnRheCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVJZEZuIHtcbiAgKHNyYzogc3RyaW5nKTogT3B0aW9uPHN0cmluZz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlY29tcGlsZU9wdGlvbnMgZXh0ZW5kcyBDb21waWxlT3B0aW9ucywgUHJlcHJvY2Vzc09wdGlvbnMge1xuICBpZD86IFRlbXBsYXRlSWRGbjtcbn1cblxuZGVjbGFyZSBmdW5jdGlvbiByZXF1aXJlKGlkOiBzdHJpbmcpOiBhbnk7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0SWQ6IFRlbXBsYXRlSWRGbiA9ICgoKSA9PiB7XG4gIGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1yZXF1aXJlLWltcG9ydHMgKi9cbiAgICAgIGNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICAgICAgLyogdHNsaW50OmVuYWJsZTpuby1yZXF1aXJlLWltcG9ydHMgKi9cblxuICAgICAgbGV0IGlkRm46IFRlbXBsYXRlSWRGbiA9IHNyYyA9PiB7XG4gICAgICAgIGxldCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKTtcbiAgICAgICAgaGFzaC51cGRhdGUoc3JjLCAndXRmOCcpO1xuICAgICAgICAvLyB0cmltIHRvIDYgYnl0ZXMgb2YgZGF0YSAoMl40OCAtIDEpXG4gICAgICAgIHJldHVybiBoYXNoLmRpZ2VzdCgnYmFzZTY0Jykuc3Vic3RyaW5nKDAsIDgpO1xuICAgICAgfTtcblxuICAgICAgaWRGbigndGVzdCcpO1xuXG4gICAgICByZXR1cm4gaWRGbjtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGlkRm4oKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59KSgpO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9uczogUHJlY29tcGlsZU9wdGlvbnMgPSB7XG4gIGlkOiBkZWZhdWx0SWQsXG4gIG1ldGE6IHt9LFxufTtcblxuLypcbiAqIENvbXBpbGUgYSBzdHJpbmcgaW50byBhIHRlbXBsYXRlIGphdmFzY3JpcHQgc3RyaW5nLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiAgICAgaW1wb3J0IHsgcHJlY29tcGlsZSB9IGZyb20gJ0BnbGltbWVyL2NvbXBpbGVyJztcbiAqICAgICBpbXBvcnQgeyB0ZW1wbGF0ZUZhY3RvcnkgfSBmcm9tICdnbGltZXItcnVudGltZSc7XG4gKiAgICAgbGV0IHRlbXBsYXRlSnMgPSBwcmVjb21waWxlKFwiSG93ZHkge3tuYW1lfX1cIik7XG4gKiAgICAgbGV0IGZhY3RvcnkgPSB0ZW1wbGF0ZUZhY3RvcnkobmV3IEZ1bmN0aW9uKFwicmV0dXJuIFwiICsgdGVtcGxhdGVKcykoKSk7XG4gKiAgICAgbGV0IHRlbXBsYXRlID0gZmFjdG9yeS5jcmVhdGUoZW52KTtcbiAqXG4gKiBAbWV0aG9kIHByZWNvbXBpbGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgYSBHbGltbWVyIHRlbXBsYXRlIHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfSBhIHRlbXBsYXRlIGphdmFzY3JpcHQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVjb21waWxlKHN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUHJlY29tcGlsZU9wdGlvbnMpOiBUZW1wbGF0ZUphdmFzY3JpcHQ7XG5leHBvcnQgZnVuY3Rpb24gcHJlY29tcGlsZShcbiAgc3RyaW5nOiBzdHJpbmcsXG4gIG9wdGlvbnM6IFByZWNvbXBpbGVPcHRpb25zID0gZGVmYXVsdE9wdGlvbnNcbik6IFRlbXBsYXRlSmF2YXNjcmlwdCB7XG4gIGxldCBhc3QgPSBwcmVwcm9jZXNzKHN0cmluZywgb3B0aW9ucyk7XG4gIGxldCB7IG1ldGEgfSA9IG9wdGlvbnM7XG4gIGxldCB7IGJsb2NrIH0gPSBUZW1wbGF0ZUNvbXBpbGVyLmNvbXBpbGUoYXN0LCBvcHRpb25zKTtcbiAgbGV0IGlkRm4gPSBvcHRpb25zLmlkIHx8IGRlZmF1bHRJZDtcbiAgbGV0IGJsb2NrSlNPTiA9IEpTT04uc3RyaW5naWZ5KGJsb2NrLnRvSlNPTigpKTtcbiAgbGV0IHRlbXBsYXRlSlNPTk9iamVjdDogU2VyaWFsaXplZFRlbXBsYXRlV2l0aExhenlCbG9jazxUZW1wbGF0ZU1ldGE+ID0ge1xuICAgIGlkOiBpZEZuKEpTT04uc3RyaW5naWZ5KG1ldGEpICsgYmxvY2tKU09OKSxcbiAgICBibG9jazogYmxvY2tKU09OLFxuICAgIG1ldGE6IG1ldGEgYXMgVGVtcGxhdGVNZXRhLFxuICB9O1xuXG4gIC8vIEpTT04gaXMgamF2YXNjcmlwdFxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGVtcGxhdGVKU09OT2JqZWN0KTtcbn1cbiJdfQ==