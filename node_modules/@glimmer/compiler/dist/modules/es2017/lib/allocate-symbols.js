import { Stack } from '@glimmer/util';
export class SymbolAllocator {
    constructor(ops) {
        this.ops = ops;
        this.symbolStack = new Stack();
    }
    process() {
        let out = [];
        let { ops } = this;
        for (let i = 0; i < ops.length; i++) {
            let op = ops[i];
            let result = this.dispatch(op);
            if (result === undefined) {
                out.push(op);
            } else {
                out.push(result);
            }
        }
        return out;
    }
    dispatch(op) {
        let name = op[0];
        let operand = op[1];
        return this[name](operand);
    }
    get symbols() {
        return this.symbolStack.current;
    }
    startProgram(op) {
        this.symbolStack.push(op['symbols']);
    }
    endProgram(_op) {
        this.symbolStack.pop();
    }
    startBlock(op) {
        this.symbolStack.push(op['symbols']);
    }
    endBlock(_op) {
        this.symbolStack.pop();
    }
    flushElement(op) {
        this.symbolStack.push(op['symbols']);
    }
    closeElement(_op) {
        this.symbolStack.pop();
    }
    closeComponent(_op) {
        this.symbolStack.pop();
    }
    closeDynamicComponent(_op) {
        this.symbolStack.pop();
    }
    attrSplat(_op) {
        return ['attrSplat', this.symbols.allocateBlock('attrs')];
    }
    get(op) {
        let [name, rest] = op;
        if (name === 0) {
            return ['get', [0, rest]];
        }
        if (isLocal(name, this.symbols)) {
            let head = this.symbols.get(name);
            return ['get', [head, rest]];
        } else if (name[0] === '@') {
            let head = this.symbols.allocateNamed(name);
            return ['get', [head, rest]];
        } else {
            return ['maybeLocal', [name, ...rest]];
        }
    }
    maybeGet(op) {
        let [name, rest] = op;
        if (name === 0) {
            return ['get', [0, rest]];
        }
        if (isLocal(name, this.symbols)) {
            let head = this.symbols.get(name);
            return ['get', [head, rest]];
        } else if (name[0] === '@') {
            let head = this.symbols.allocateNamed(name);
            return ['get', [head, rest]];
        } else if (rest.length === 0) {
            return ['unknown', name];
        } else {
            return ['maybeLocal', [name, ...rest]];
        }
    }
    yield(op) {
        if (op === 0) {
            throw new Error('Cannot yield to this');
        }
        return ['yield', this.symbols.allocateBlock(op)];
    }
    debugger(_op) {
        return ['debugger', this.symbols.getEvalInfo()];
    }
    hasBlock(op) {
        if (op === 0) {
            throw new Error('Cannot hasBlock this');
        }
        return ['hasBlock', this.symbols.allocateBlock(op)];
    }
    hasBlockParams(op) {
        if (op === 0) {
            throw new Error('Cannot hasBlockParams this');
        }
        return ['hasBlockParams', this.symbols.allocateBlock(op)];
    }
    partial(_op) {
        return ['partial', this.symbols.getEvalInfo()];
    }
    text(_op) {}
    comment(_op) {}
    openComponent(_op) {}
    openElement(_op) {}
    openSplattedElement(_op) {}
    staticArg(_op) {}
    dynamicArg(_op) {}
    staticAttr(_op) {}
    trustingAttr(_op) {}
    dynamicAttr(_op) {}
    modifier(_op) {}
    append(_op) {}
    block(_op) {}
    literal(_op) {}
    helper(_op) {}
    unknown(_op) {}
    maybeLocal(_op) {}
    prepareArray(_op) {}
    prepareObject(_op) {}
    concat(_op) {}
}
function isLocal(name, symbols) {
    return symbols && symbols.has(name);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,