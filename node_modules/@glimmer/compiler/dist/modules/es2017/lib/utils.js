export function processOpcodes(compiler, opcodes) {
    for (let i = 0, l = opcodes.length; i < l; i++) {
        let method = opcodes[i][0];
        let params = opcodes[i][1];
        if (params) {
            compiler[method].apply(compiler, params);
        } else {
            compiler[method].call(compiler);
        }
    }
}
// There is a small whitelist of namespaced attributes specially
// enumerated in
// https://www.w3.org/TR/html/syntax.html#attributes-0
//
// > When a foreign element has one of the namespaced attributes given by
// > the local name and namespace of the first and second cells of a row
// > from the following table, it must be written using the name given by
// > the third cell from the same row.
//
// In all other cases, colons are interpreted as a regular character
// with no special meaning:
//
// > No other namespaced attribute can be expressed in the HTML syntax.
const XLINK = 'http://www.w3.org/1999/xlink';
const XML = 'http://www.w3.org/XML/1998/namespace';
const XMLNS = 'http://www.w3.org/2000/xmlns/';
const WHITELIST = {
    'xlink:actuate': XLINK,
    'xlink:arcrole': XLINK,
    'xlink:href': XLINK,
    'xlink:role': XLINK,
    'xlink:show': XLINK,
    'xlink:title': XLINK,
    'xlink:type': XLINK,
    'xml:base': XML,
    'xml:lang': XML,
    'xml:space': XML,
    xmlns: XMLNS,
    'xmlns:xlink': XMLNS
};
export function getAttrNamespace(attrName) {
    return WHITELIST[attrName] || null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9jb21waWxlci9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTSxnQkFBVSxBQUFjLGVBQUMsQUFBYSxVQUFFLEFBQVk7QUFDeEQsU0FBSyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQU8sUUFBQyxBQUFNLFFBQUUsQUFBQyxJQUFHLEFBQUMsR0FBRSxBQUFDLEFBQUUsS0FBRTtBQUM5QyxZQUFJLEFBQU0sU0FBRyxBQUFPLFFBQUMsQUFBQyxBQUFDLEdBQUMsQUFBQyxBQUFDLEFBQUM7QUFDM0IsWUFBSSxBQUFNLFNBQUcsQUFBTyxRQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUMsQUFBQyxBQUFDO0FBQzNCLFlBQUksQUFBTSxRQUFFO0FBQ1YsQUFBUSxxQkFBQyxBQUFNLEFBQUMsUUFBQyxBQUFLLE1BQUMsQUFBUSxVQUFFLEFBQU0sQUFBQyxBQUFDO0FBQzFDLGVBQU07QUFDTCxBQUFRLHFCQUFDLEFBQU0sQUFBQyxRQUFDLEFBQUksS0FBQyxBQUFRLEFBQUMsQUFBQztBQUNqQztBQUNGLEFBQ0g7QUFBQztBQUVELEFBQWdFO0FBQ2hFLEFBQWdCO0FBQ2hCLEFBQXNEO0FBQ3RELEFBQUU7QUFDRixBQUF5RTtBQUN6RSxBQUF3RTtBQUN4RSxBQUF5RTtBQUN6RSxBQUFzQztBQUN0QyxBQUFFO0FBQ0YsQUFBb0U7QUFDcEUsQUFBMkI7QUFDM0IsQUFBRTtBQUNGLEFBQXVFO0FBRXZFLE1BQU0sQUFBSyxRQUFHLEFBQThCLEFBQUM7QUFDN0MsTUFBTSxBQUFHLE1BQUcsQUFBc0MsQUFBQztBQUNuRCxNQUFNLEFBQUssUUFBRyxBQUErQixBQUFDO0FBRTlDLE1BQU0sQUFBUztBQUNiLEFBQWUscUJBQUUsQUFBSztBQUN0QixBQUFlLHFCQUFFLEFBQUs7QUFDdEIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVksa0JBQUUsQUFBSztBQUNuQixBQUFZLGtCQUFFLEFBQUs7QUFDbkIsQUFBYSxtQkFBRSxBQUFLO0FBQ3BCLEFBQVksa0JBQUUsQUFBSztBQUNuQixBQUFVLGdCQUFFLEFBQUc7QUFDZixBQUFVLGdCQUFFLEFBQUc7QUFDZixBQUFXLGlCQUFFLEFBQUc7QUFDaEIsQUFBSyxXQUFFLEFBQUs7QUFDWixBQUFhLG1CQUFFLEFBQUssQUFDckIsQUFBQztBQWJnQjtBQWVsQixBQUFNLGdCQUFVLEFBQWdCLGlCQUFDLEFBQWdCO0FBQy9DLFdBQU8sQUFBUyxVQUFDLEFBQVEsQUFBQyxhQUFJLEFBQUksQUFBQyxBQUNyQztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NPcGNvZGVzKGNvbXBpbGVyOiBhbnksIG9wY29kZXM6IGFueSkge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IG9wY29kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IG1ldGhvZCA9IG9wY29kZXNbaV1bMF07XG4gICAgbGV0IHBhcmFtcyA9IG9wY29kZXNbaV1bMV07XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgY29tcGlsZXJbbWV0aG9kXS5hcHBseShjb21waWxlciwgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGlsZXJbbWV0aG9kXS5jYWxsKGNvbXBpbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlcmUgaXMgYSBzbWFsbCB3aGl0ZWxpc3Qgb2YgbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIHNwZWNpYWxseVxuLy8gZW51bWVyYXRlZCBpblxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0wXG4vL1xuLy8gPiBXaGVuIGEgZm9yZWlnbiBlbGVtZW50IGhhcyBvbmUgb2YgdGhlIG5hbWVzcGFjZWQgYXR0cmlidXRlcyBnaXZlbiBieVxuLy8gPiB0aGUgbG9jYWwgbmFtZSBhbmQgbmFtZXNwYWNlIG9mIHRoZSBmaXJzdCBhbmQgc2Vjb25kIGNlbGxzIG9mIGEgcm93XG4vLyA+IGZyb20gdGhlIGZvbGxvd2luZyB0YWJsZSwgaXQgbXVzdCBiZSB3cml0dGVuIHVzaW5nIHRoZSBuYW1lIGdpdmVuIGJ5XG4vLyA+IHRoZSB0aGlyZCBjZWxsIGZyb20gdGhlIHNhbWUgcm93LlxuLy9cbi8vIEluIGFsbCBvdGhlciBjYXNlcywgY29sb25zIGFyZSBpbnRlcnByZXRlZCBhcyBhIHJlZ3VsYXIgY2hhcmFjdGVyXG4vLyB3aXRoIG5vIHNwZWNpYWwgbWVhbmluZzpcbi8vXG4vLyA+IE5vIG90aGVyIG5hbWVzcGFjZWQgYXR0cmlidXRlIGNhbiBiZSBleHByZXNzZWQgaW4gdGhlIEhUTUwgc3ludGF4LlxuXG5jb25zdCBYTElOSyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcbmNvbnN0IFhNTCA9ICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnO1xuY29uc3QgWE1MTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8nO1xuXG5jb25zdCBXSElURUxJU1QgPSB7XG4gICd4bGluazphY3R1YXRlJzogWExJTkssXG4gICd4bGluazphcmNyb2xlJzogWExJTkssXG4gICd4bGluazpocmVmJzogWExJTkssXG4gICd4bGluazpyb2xlJzogWExJTkssXG4gICd4bGluazpzaG93JzogWExJTkssXG4gICd4bGluazp0aXRsZSc6IFhMSU5LLFxuICAneGxpbms6dHlwZSc6IFhMSU5LLFxuICAneG1sOmJhc2UnOiBYTUwsXG4gICd4bWw6bGFuZyc6IFhNTCxcbiAgJ3htbDpzcGFjZSc6IFhNTCxcbiAgeG1sbnM6IFhNTE5TLFxuICAneG1sbnM6eGxpbmsnOiBYTUxOUyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyTmFtZXNwYWNlKGF0dHJOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFdISVRFTElTVFthdHRyTmFtZV0gfHwgbnVsbDtcbn1cbiJdfQ==