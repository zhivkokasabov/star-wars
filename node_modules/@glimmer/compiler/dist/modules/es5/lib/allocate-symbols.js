var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { Stack } from '@glimmer/util';
export var SymbolAllocator = function () {
    function SymbolAllocator(ops) {
        _classCallCheck(this, SymbolAllocator);

        this.ops = ops;
        this.symbolStack = new Stack();
    }

    SymbolAllocator.prototype.process = function process() {
        var out = [];
        var ops = this.ops;

        for (var i = 0; i < ops.length; i++) {
            var op = ops[i];
            var result = this.dispatch(op);
            if (result === undefined) {
                out.push(op);
            } else {
                out.push(result);
            }
        }
        return out;
    };

    SymbolAllocator.prototype.dispatch = function dispatch(op) {
        var name = op[0];
        var operand = op[1];
        return this[name](operand);
    };

    SymbolAllocator.prototype.startProgram = function startProgram(op) {
        this.symbolStack.push(op['symbols']);
    };

    SymbolAllocator.prototype.endProgram = function endProgram(_op) {
        this.symbolStack.pop();
    };

    SymbolAllocator.prototype.startBlock = function startBlock(op) {
        this.symbolStack.push(op['symbols']);
    };

    SymbolAllocator.prototype.endBlock = function endBlock(_op) {
        this.symbolStack.pop();
    };

    SymbolAllocator.prototype.flushElement = function flushElement(op) {
        this.symbolStack.push(op['symbols']);
    };

    SymbolAllocator.prototype.closeElement = function closeElement(_op) {
        this.symbolStack.pop();
    };

    SymbolAllocator.prototype.closeComponent = function closeComponent(_op) {
        this.symbolStack.pop();
    };

    SymbolAllocator.prototype.closeDynamicComponent = function closeDynamicComponent(_op) {
        this.symbolStack.pop();
    };

    SymbolAllocator.prototype.attrSplat = function attrSplat(_op) {
        return ['attrSplat', this.symbols.allocateBlock('attrs')];
    };

    SymbolAllocator.prototype.get = function get(op) {
        var name = op[0],
            rest = op[1];

        if (name === 0) {
            return ['get', [0, rest]];
        }
        if (isLocal(name, this.symbols)) {
            var head = this.symbols.get(name);
            return ['get', [head, rest]];
        } else if (name[0] === '@') {
            var _head = this.symbols.allocateNamed(name);
            return ['get', [_head, rest]];
        } else {
            return ['maybeLocal', [name].concat(rest)];
        }
    };

    SymbolAllocator.prototype.maybeGet = function maybeGet(op) {
        var name = op[0],
            rest = op[1];

        if (name === 0) {
            return ['get', [0, rest]];
        }
        if (isLocal(name, this.symbols)) {
            var head = this.symbols.get(name);
            return ['get', [head, rest]];
        } else if (name[0] === '@') {
            var _head2 = this.symbols.allocateNamed(name);
            return ['get', [_head2, rest]];
        } else if (rest.length === 0) {
            return ['unknown', name];
        } else {
            return ['maybeLocal', [name].concat(rest)];
        }
    };

    SymbolAllocator.prototype.yield = function _yield(op) {
        if (op === 0) {
            throw new Error('Cannot yield to this');
        }
        return ['yield', this.symbols.allocateBlock(op)];
    };

    SymbolAllocator.prototype.debugger = function _debugger(_op) {
        return ['debugger', this.symbols.getEvalInfo()];
    };

    SymbolAllocator.prototype.hasBlock = function hasBlock(op) {
        if (op === 0) {
            throw new Error('Cannot hasBlock this');
        }
        return ['hasBlock', this.symbols.allocateBlock(op)];
    };

    SymbolAllocator.prototype.hasBlockParams = function hasBlockParams(op) {
        if (op === 0) {
            throw new Error('Cannot hasBlockParams this');
        }
        return ['hasBlockParams', this.symbols.allocateBlock(op)];
    };

    SymbolAllocator.prototype.partial = function partial(_op) {
        return ['partial', this.symbols.getEvalInfo()];
    };

    SymbolAllocator.prototype.text = function text(_op) {};

    SymbolAllocator.prototype.comment = function comment(_op) {};

    SymbolAllocator.prototype.openComponent = function openComponent(_op) {};

    SymbolAllocator.prototype.openElement = function openElement(_op) {};

    SymbolAllocator.prototype.openSplattedElement = function openSplattedElement(_op) {};

    SymbolAllocator.prototype.staticArg = function staticArg(_op) {};

    SymbolAllocator.prototype.dynamicArg = function dynamicArg(_op) {};

    SymbolAllocator.prototype.staticAttr = function staticAttr(_op) {};

    SymbolAllocator.prototype.trustingAttr = function trustingAttr(_op) {};

    SymbolAllocator.prototype.dynamicAttr = function dynamicAttr(_op) {};

    SymbolAllocator.prototype.modifier = function modifier(_op) {};

    SymbolAllocator.prototype.append = function append(_op) {};

    SymbolAllocator.prototype.block = function block(_op) {};

    SymbolAllocator.prototype.literal = function literal(_op) {};

    SymbolAllocator.prototype.helper = function helper(_op) {};

    SymbolAllocator.prototype.unknown = function unknown(_op) {};

    SymbolAllocator.prototype.maybeLocal = function maybeLocal(_op) {};

    SymbolAllocator.prototype.prepareArray = function prepareArray(_op) {};

    SymbolAllocator.prototype.prepareObject = function prepareObject(_op) {};

    SymbolAllocator.prototype.concat = function concat(_op) {};

    _createClass(SymbolAllocator, [{
        key: 'symbols',
        get: function get() {
            return this.symbolStack.current;
        }
    }]);

    return SymbolAllocator;
}();
function isLocal(name, symbols) {
    return symbols && symbols.has(name);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,