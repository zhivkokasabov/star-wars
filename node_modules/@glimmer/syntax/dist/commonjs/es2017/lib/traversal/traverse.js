'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = traverse;

var _visitorKeys = require('../types/visitor-keys');

var _visitorKeys2 = _interopRequireDefault(_visitorKeys);

var _errors = require('./errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getEnterFunction(handler) {
    return typeof handler === 'function' ? handler : handler.enter;
}
function getExitFunction(handler) {
    return typeof handler !== 'function' ? handler.exit : undefined;
}
function getKeyHandler(handler, key) {
    let keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;
    if (keyVisitor === undefined) return;
    let keyHandler = keyVisitor[key];
    if (keyHandler !== undefined) {
        // widen specific key to all keys
        return keyHandler;
    }
    return keyVisitor.All;
}
function getNodeHandler(visitor, nodeType) {
    let handler = visitor[nodeType];
    if (handler !== undefined) {
        // widen specific Node to all nodes
        return handler;
    }
    return visitor.All;
}
function visitNode(visitor, node) {
    let handler = getNodeHandler(visitor, node.type);
    let enter;
    let exit;
    if (handler !== undefined) {
        enter = getEnterFunction(handler);
        exit = getExitFunction(handler);
    }
    let result;
    if (enter !== undefined) {
        result = enter(node);
    }
    if (result !== undefined && result !== null) {
        if (JSON.stringify(node) === JSON.stringify(result)) {
            result = undefined;
        } else if (Array.isArray(result)) {
            visitArray(visitor, result);
            return result;
        } else {
            return visitNode(visitor, result) || result;
        }
    }
    if (result === undefined) {
        let keys = _visitorKeys2.default[node.type];
        for (let i = 0; i < keys.length; i++) {
            // we know if it has child keys we can widen to a ParentNode
            visitKey(visitor, handler, node, keys[i]);
        }
        if (exit !== undefined) {
            result = exit(node);
        }
    }
    return result;
}
function visitKey(visitor, handler, node, key) {
    let value = node[key];
    if (!value) {
        return;
    }
    let keyEnter;
    let keyExit;
    if (handler !== undefined) {
        let keyHandler = getKeyHandler(handler, key);
        if (keyHandler !== undefined) {
            keyEnter = getEnterFunction(keyHandler);
            keyExit = getExitFunction(keyHandler);
        }
    }
    if (keyEnter !== undefined) {
        if (keyEnter(node, key) !== undefined) {
            throw (0, _errors.cannotReplaceOrRemoveInKeyHandlerYet)(node, key);
        }
    }
    if (Array.isArray(value)) {
        visitArray(visitor, value);
    } else {
        let result = visitNode(visitor, value);
        if (result !== undefined) {
            assignKey(node, key, result);
        }
    }
    if (keyExit !== undefined) {
        if (keyExit(node, key) !== undefined) {
            throw (0, _errors.cannotReplaceOrRemoveInKeyHandlerYet)(node, key);
        }
    }
}
function visitArray(visitor, array) {
    for (let i = 0; i < array.length; i++) {
        let result = visitNode(visitor, array[i]);
        if (result !== undefined) {
            i += spliceArray(array, i, result) - 1;
        }
    }
}
function assignKey(node, key, result) {
    if (result === null) {
        throw (0, _errors.cannotRemoveNode)(node[key], node, key);
    } else if (Array.isArray(result)) {
        if (result.length === 1) {
            node[key] = result[0];
        } else {
            if (result.length === 0) {
                throw (0, _errors.cannotRemoveNode)(node[key], node, key);
            } else {
                throw (0, _errors.cannotReplaceNode)(node[key], node, key);
            }
        }
    } else {
        node[key] = result;
    }
}
function spliceArray(array, index, result) {
    if (result === null) {
        array.splice(index, 1);
        return 0;
    } else if (Array.isArray(result)) {
        array.splice(index, 1, ...result);
        return result.length;
    } else {
        array.splice(index, 1, result);
        return 1;
    }
}
function traverse(node, visitor) {
    visitNode(visitor, node);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,