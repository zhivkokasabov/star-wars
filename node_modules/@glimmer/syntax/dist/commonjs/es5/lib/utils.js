'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseElementBlockParams = parseElementBlockParams;
exports.childrenFor = childrenFor;
exports.appendChild = appendChild;
exports.isLiteral = isLiteral;
exports.printLiteral = printLiteral;

var _syntaxError = require('./errors/syntax-error');

var _syntaxError2 = _interopRequireDefault(_syntaxError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Regex to validate the identifier for block parameters.
// Based on the ID validation regex in Handlebars.
var ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\{-~]/;
// Checks the element's attributes to see if it uses block params.
// If it does, registers the block params with the program and
// removes the corresponding attributes from the element.
function parseElementBlockParams(element) {
    var params = parseBlockParams(element);
    if (params) element.blockParams = params;
}
function parseBlockParams(element) {
    var l = element.attributes.length;
    var attrNames = [];
    for (var i = 0; i < l; i++) {
        attrNames.push(element.attributes[i].name);
    }
    var asIndex = attrNames.indexOf('as');
    if (asIndex !== -1 && l > asIndex && attrNames[asIndex + 1].charAt(0) === '|') {
        // Some basic validation, since we're doing the parsing ourselves
        var paramsString = attrNames.slice(asIndex).join(' ');
        if (paramsString.charAt(paramsString.length - 1) !== '|' || paramsString.match(/\|/g).length !== 2) {
            throw new _syntaxError2.default("Invalid block parameters syntax: '" + paramsString + "'", element.loc);
        }
        var params = [];
        for (var _i = asIndex + 1; _i < l; _i++) {
            var param = attrNames[_i].replace(/\|/g, '');
            if (param !== '') {
                if (ID_INVERSE_PATTERN.test(param)) {
                    throw new _syntaxError2.default("Invalid identifier for block parameters: '" + param + "' in '" + paramsString + "'", element.loc);
                }
                params.push(param);
            }
        }
        if (params.length === 0) {
            throw new _syntaxError2.default("Cannot use zero block parameters: '" + paramsString + "'", element.loc);
        }
        element.attributes = element.attributes.slice(0, asIndex);
        return params;
    }
    return null;
}
function childrenFor(node) {
    switch (node.type) {
        case 'Program':
            return node.body;
        case 'ElementNode':
            return node.children;
    }
}
function appendChild(parent, node) {
    childrenFor(parent).push(node);
}
function isLiteral(path) {
    return path.type === 'StringLiteral' || path.type === 'BooleanLiteral' || path.type === 'NumberLiteral' || path.type === 'NullLiteral' || path.type === 'UndefinedLiteral';
}
function printLiteral(literal) {
    if (literal.type === 'UndefinedLiteral') {
        return 'undefined';
    } else {
        return JSON.stringify(literal.value);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O1FBYWdCLEFBQXVCO1FBcUR2QixBQUFXO1FBU1gsQUFBVztRQUlYLEFBQVM7UUFVVCxBQUFZOztBQXZGNUIsQUFBTyxBQUFXLEFBQU0sQUFBdUIsQUFBQzs7Ozs7O0FBRWhELEFBQXlEO0FBQ3pELEFBQWtEO0FBRWxELElBQUksQUFBa0IscUJBQUcsQUFBNEIsQUFBQztBQUV0RCxBQUFrRTtBQUNsRSxBQUE4RDtBQUM5RCxBQUF5RCxBQUV6RCxBQUFNO2lDQUFrQyxBQUF3QixTQUM5RDtRQUFJLEFBQU0sU0FBRyxBQUFnQixpQkFBQyxBQUFPLEFBQUMsQUFBQyxBQUN2QztRQUFJLEFBQU0sUUFBRSxBQUFPLFFBQUMsQUFBVyxjQUFHLEFBQU0sQUFBQyxBQUMzQyxBQUFDOztBQUVELFNBQVMsQUFBZ0IsaUJBQUMsQUFBd0IsU0FDaEQ7UUFBSSxBQUFDLElBQUcsQUFBTyxRQUFDLEFBQVUsV0FBQyxBQUFNLEFBQUMsQUFDbEM7UUFBSSxBQUFTLFlBQUcsQUFBRSxBQUFDLEFBRW5CO1NBQUssSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxBQUFFLEtBQUUsQUFDMUIsQUFBUztrQkFBQyxBQUFJLEtBQUMsQUFBTyxRQUFDLEFBQVUsV0FBQyxBQUFDLEFBQUMsR0FBQyxBQUFJLEFBQUMsQUFBQyxBQUM1QyxBQUVEOztRQUFJLEFBQU8sVUFBRyxBQUFTLFVBQUMsQUFBTyxRQUFDLEFBQUksQUFBQyxBQUFDLEFBRXRDO1FBQUksQUFBTyxZQUFLLENBQUMsQUFBQyxLQUFJLEFBQUMsSUFBRyxBQUFPLFdBQUksQUFBUyxVQUFDLEFBQU8sVUFBRyxBQUFDLEFBQUMsR0FBQyxBQUFNLE9BQUMsQUFBQyxBQUFDLE9BQUssQUFBRyxLQUFFLEFBQzdFLEFBQWlFLEFBQ2pFOztZQUFJLEFBQVksZUFBRyxBQUFTLFVBQUMsQUFBSyxNQUFDLEFBQU8sQUFBQyxTQUFDLEFBQUksS0FBQyxBQUFHLEFBQUMsQUFBQyxBQUN0RDtZQUNFLEFBQVksYUFBQyxBQUFNLE9BQUMsQUFBWSxhQUFDLEFBQU0sU0FBRyxBQUFDLEFBQUMsT0FBSyxBQUFHLE9BQ3BELEFBQVksYUFBQyxBQUFLLE1BQUMsQUFBSyxBQUFFLE9BQUMsQUFBTSxXQUFLLEFBQUMsR0FDdkMsQUFDQTtrQkFBTSxBQUFJLEFBQVcsMEJBQUMsQUFBb0MsdUNBQUcsQUFBWSxlQUFHLEFBQUcsS0FBRSxBQUFPLFFBQUMsQUFBRyxBQUFDLEFBQUMsQUFDL0YsQUFFRDs7WUFBSSxBQUFNLFNBQUcsQUFBRSxBQUFDLEFBQ2hCO2FBQUssSUFBSSxBQUFDLEtBQUcsQUFBTyxVQUFHLEFBQUMsR0FBRSxBQUFDLEtBQUcsQUFBQyxHQUFFLEFBQUMsQUFBRSxNQUFFLEFBQ3BDO2dCQUFJLEFBQUssUUFBRyxBQUFTLFVBQUMsQUFBQyxBQUFDLElBQUMsQUFBTyxRQUFDLEFBQUssT0FBRSxBQUFFLEFBQUMsQUFBQyxBQUM1QztnQkFBSSxBQUFLLFVBQUssQUFBRSxJQUFFLEFBQ2hCO29CQUFJLEFBQWtCLG1CQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsUUFBRSxBQUNsQzswQkFBTSxBQUFJLEFBQVcsMEJBQ25CLEFBQTRDLCtDQUFHLEFBQUssUUFBRyxBQUFRLFdBQUcsQUFBWSxlQUFHLEFBQUcsS0FDcEYsQUFBTyxRQUFDLEFBQUcsQUFDWixBQUFDLEFBQ0gsQUFDRCxBQUFNOzt1QkFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQUMsQUFDcEIsQUFDRjtBQUVEOztZQUFJLEFBQU0sT0FBQyxBQUFNLFdBQUssQUFBQyxHQUFFLEFBQ3ZCO2tCQUFNLEFBQUksQUFBVywwQkFDbkIsQUFBcUMsd0NBQUcsQUFBWSxlQUFHLEFBQUcsS0FDMUQsQUFBTyxRQUFDLEFBQUcsQUFDWixBQUFDLEFBQ0gsQUFFRCxBQUFPOztnQkFBQyxBQUFVLGFBQUcsQUFBTyxRQUFDLEFBQVUsV0FBQyxBQUFLLE1BQUMsQUFBQyxHQUFFLEFBQU8sQUFBQyxBQUFDLEFBQzFEO2VBQU8sQUFBTSxBQUFDLEFBQ2YsQUFFRDs7V0FBTyxBQUFJLEFBQUMsQUFDZCxBQUFDO0FBRUQsQUFBTTtxQkFBc0IsQUFBbUMsTUFDN0Q7WUFBUSxBQUFJLEtBQUMsQUFBSSxBQUFFLEFBQ2pCO2FBQUssQUFBUyxBQUNaO21CQUFPLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFDbkI7YUFBSyxBQUFhLEFBQ2hCO21CQUFPLEFBQUksS0FBQyxBQUFRLEFBQUMsQUFDeEIsQUFDSCxBQUFDOztBQUVELEFBQU07cUJBQXNCLEFBQXFDLFFBQUUsQUFBbUIsTUFDcEYsQUFBVztnQkFBQyxBQUFNLEFBQUMsUUFBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUMsQUFDakMsQUFBQztBQUVELEFBQU07bUJBQW9CLEFBQXNDLE1BQzlELEFBQU87V0FDTCxBQUFJLEtBQUMsQUFBSSxTQUFLLEFBQWUsbUJBQzdCLEFBQUksS0FBQyxBQUFJLFNBQUssQUFBZ0Isb0JBQzlCLEFBQUksS0FBQyxBQUFJLFNBQUssQUFBZSxtQkFDN0IsQUFBSSxLQUFDLEFBQUksU0FBSyxBQUFhLGlCQUMzQixBQUFJLEtBQUMsQUFBSSxTQUFLLEFBQWtCLEFBQ2pDLEFBQUMsQUFDSixBQUFDO0FBRUQsQUFBTTtzQkFBdUIsQUFBb0IsU0FDL0M7UUFBSSxBQUFPLFFBQUMsQUFBSSxTQUFLLEFBQWtCLG9CQUFFLEFBQ3ZDO2VBQU8sQUFBVyxBQUFDLEFBQ3BCO1dBQU0sQUFDTDtlQUFPLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBTyxRQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3RDLEFBQ0gsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFTVCBmcm9tICcuL3R5cGVzL25vZGVzJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IFN5bnRheEVycm9yIGZyb20gJy4vZXJyb3JzL3N5bnRheC1lcnJvcic7XG5cbi8vIFJlZ2V4IHRvIHZhbGlkYXRlIHRoZSBpZGVudGlmaWVyIGZvciBibG9jayBwYXJhbWV0ZXJzLlxuLy8gQmFzZWQgb24gdGhlIElEIHZhbGlkYXRpb24gcmVnZXggaW4gSGFuZGxlYmFycy5cblxubGV0IElEX0lOVkVSU0VfUEFUVEVSTiA9IC9bIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XS87XG5cbi8vIENoZWNrcyB0aGUgZWxlbWVudCdzIGF0dHJpYnV0ZXMgdG8gc2VlIGlmIGl0IHVzZXMgYmxvY2sgcGFyYW1zLlxuLy8gSWYgaXQgZG9lcywgcmVnaXN0ZXJzIHRoZSBibG9jayBwYXJhbXMgd2l0aCB0aGUgcHJvZ3JhbSBhbmRcbi8vIHJlbW92ZXMgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlcyBmcm9tIHRoZSBlbGVtZW50LlxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFbGVtZW50QmxvY2tQYXJhbXMoZWxlbWVudDogQVNULkVsZW1lbnROb2RlKSB7XG4gIGxldCBwYXJhbXMgPSBwYXJzZUJsb2NrUGFyYW1zKGVsZW1lbnQpO1xuICBpZiAocGFyYW1zKSBlbGVtZW50LmJsb2NrUGFyYW1zID0gcGFyYW1zO1xufVxuXG5mdW5jdGlvbiBwYXJzZUJsb2NrUGFyYW1zKGVsZW1lbnQ6IEFTVC5FbGVtZW50Tm9kZSk6IE9wdGlvbjxzdHJpbmdbXT4ge1xuICBsZXQgbCA9IGVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7XG4gIGxldCBhdHRyTmFtZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIGF0dHJOYW1lcy5wdXNoKGVsZW1lbnQuYXR0cmlidXRlc1tpXS5uYW1lKTtcbiAgfVxuXG4gIGxldCBhc0luZGV4ID0gYXR0ck5hbWVzLmluZGV4T2YoJ2FzJyk7XG5cbiAgaWYgKGFzSW5kZXggIT09IC0xICYmIGwgPiBhc0luZGV4ICYmIGF0dHJOYW1lc1thc0luZGV4ICsgMV0uY2hhckF0KDApID09PSAnfCcpIHtcbiAgICAvLyBTb21lIGJhc2ljIHZhbGlkYXRpb24sIHNpbmNlIHdlJ3JlIGRvaW5nIHRoZSBwYXJzaW5nIG91cnNlbHZlc1xuICAgIGxldCBwYXJhbXNTdHJpbmcgPSBhdHRyTmFtZXMuc2xpY2UoYXNJbmRleCkuam9pbignICcpO1xuICAgIGlmIChcbiAgICAgIHBhcmFtc1N0cmluZy5jaGFyQXQocGFyYW1zU3RyaW5nLmxlbmd0aCAtIDEpICE9PSAnfCcgfHxcbiAgICAgIHBhcmFtc1N0cmluZy5tYXRjaCgvXFx8L2cpIS5sZW5ndGggIT09IDJcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkludmFsaWQgYmxvY2sgcGFyYW1ldGVycyBzeW50YXg6ICdcIiArIHBhcmFtc1N0cmluZyArIFwiJ1wiLCBlbGVtZW50LmxvYyk7XG4gICAgfVxuXG4gICAgbGV0IHBhcmFtcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBhc0luZGV4ICsgMTsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IHBhcmFtID0gYXR0ck5hbWVzW2ldLnJlcGxhY2UoL1xcfC9nLCAnJyk7XG4gICAgICBpZiAocGFyYW0gIT09ICcnKSB7XG4gICAgICAgIGlmIChJRF9JTlZFUlNFX1BBVFRFUk4udGVzdChwYXJhbSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXG4gICAgICAgICAgICBcIkludmFsaWQgaWRlbnRpZmllciBmb3IgYmxvY2sgcGFyYW1ldGVyczogJ1wiICsgcGFyYW0gKyBcIicgaW4gJ1wiICsgcGFyYW1zU3RyaW5nICsgXCInXCIsXG4gICAgICAgICAgICBlbGVtZW50LmxvY1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zLnB1c2gocGFyYW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXG4gICAgICAgIFwiQ2Fubm90IHVzZSB6ZXJvIGJsb2NrIHBhcmFtZXRlcnM6ICdcIiArIHBhcmFtc1N0cmluZyArIFwiJ1wiLFxuICAgICAgICBlbGVtZW50LmxvY1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBlbGVtZW50LmF0dHJpYnV0ZXMgPSBlbGVtZW50LmF0dHJpYnV0ZXMuc2xpY2UoMCwgYXNJbmRleCk7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRyZW5Gb3Iobm9kZTogQVNULlByb2dyYW0gfCBBU1QuRWxlbWVudE5vZGUpOiBBU1QuU3RhdGVtZW50W10ge1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgJ1Byb2dyYW0nOlxuICAgICAgcmV0dXJuIG5vZGUuYm9keTtcbiAgICBjYXNlICdFbGVtZW50Tm9kZSc6XG4gICAgICByZXR1cm4gbm9kZS5jaGlsZHJlbjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ2hpbGQocGFyZW50OiBBU1QuUHJvZ3JhbSB8IEFTVC5FbGVtZW50Tm9kZSwgbm9kZTogQVNULlN0YXRlbWVudCkge1xuICBjaGlsZHJlbkZvcihwYXJlbnQpLnB1c2gobm9kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xpdGVyYWwocGF0aDogQVNULlBhdGhFeHByZXNzaW9uIHwgQVNULkxpdGVyYWwpOiBwYXRoIGlzIEFTVC5MaXRlcmFsIHtcbiAgcmV0dXJuIChcbiAgICBwYXRoLnR5cGUgPT09ICdTdHJpbmdMaXRlcmFsJyB8fFxuICAgIHBhdGgudHlwZSA9PT0gJ0Jvb2xlYW5MaXRlcmFsJyB8fFxuICAgIHBhdGgudHlwZSA9PT0gJ051bWJlckxpdGVyYWwnIHx8XG4gICAgcGF0aC50eXBlID09PSAnTnVsbExpdGVyYWwnIHx8XG4gICAgcGF0aC50eXBlID09PSAnVW5kZWZpbmVkTGl0ZXJhbCdcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50TGl0ZXJhbChsaXRlcmFsOiBBU1QuTGl0ZXJhbCk6IHN0cmluZyB7XG4gIGlmIChsaXRlcmFsLnR5cGUgPT09ICdVbmRlZmluZWRMaXRlcmFsJykge1xuICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobGl0ZXJhbC52YWx1ZSk7XG4gIH1cbn1cbiJdfQ==