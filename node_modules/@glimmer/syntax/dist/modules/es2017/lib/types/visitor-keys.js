function tuple(...args) {
    return args;
}
// ensure stays in sync with typing
// ParentNode and ChildKey types are derived from VisitorKeysMap
const visitorKeys = {
    Program: tuple('body'),
    MustacheStatement: tuple('path', 'params', 'hash'),
    BlockStatement: tuple('path', 'params', 'hash', 'program', 'inverse'),
    ElementModifierStatement: tuple('path', 'params', 'hash'),
    PartialStatement: tuple('name', 'params', 'hash'),
    CommentStatement: tuple(),
    MustacheCommentStatement: tuple(),
    ElementNode: tuple('attributes', 'modifiers', 'children', 'comments'),
    AttrNode: tuple('value'),
    TextNode: tuple(),
    ConcatStatement: tuple('parts'),
    SubExpression: tuple('path', 'params', 'hash'),
    PathExpression: tuple(),
    StringLiteral: tuple(),
    BooleanLiteral: tuple(),
    NumberLiteral: tuple(),
    NullLiteral: tuple(),
    UndefinedLiteral: tuple(),
    Hash: tuple('pairs'),
    HashPair: tuple('value')
};
export default visitorKeys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaXRvci1rZXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi90eXBlcy92aXNpdG9yLWtleXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxBQUFLLE1BQUksR0FBRyxBQUFTO0FBQzVCLFdBQU8sQUFBSSxBQUFDLEFBQ2Q7QUFBQztBQUVELEFBQW1DO0FBQ25DLEFBQWdFO0FBQ2hFLE1BQU0sQUFBVztBQUNmLEFBQU8sYUFBRSxBQUFLLE1BQUMsQUFBTSxBQUFDO0FBQ3RCLEFBQWlCLHVCQUFFLEFBQUssTUFBQyxBQUFNLFFBQUUsQUFBUSxVQUFFLEFBQU0sQUFBQztBQUNsRCxBQUFjLG9CQUFFLEFBQUssTUFBQyxBQUFNLFFBQUUsQUFBUSxVQUFFLEFBQU0sUUFBRSxBQUFTLFdBQUUsQUFBUyxBQUFDO0FBQ3JFLEFBQXdCLDhCQUFFLEFBQUssTUFBQyxBQUFNLFFBQUUsQUFBUSxVQUFFLEFBQU0sQUFBQztBQUN6RCxBQUFnQixzQkFBRSxBQUFLLE1BQUMsQUFBTSxRQUFFLEFBQVEsVUFBRSxBQUFNLEFBQUM7QUFDakQsQUFBZ0Isc0JBQUUsQUFBSyxBQUFFO0FBQ3pCLEFBQXdCLDhCQUFFLEFBQUssQUFBRTtBQUNqQyxBQUFXLGlCQUFFLEFBQUssTUFBQyxBQUFZLGNBQUUsQUFBVyxhQUFFLEFBQVUsWUFBRSxBQUFVLEFBQUM7QUFDckUsQUFBUSxjQUFFLEFBQUssTUFBQyxBQUFPLEFBQUM7QUFDeEIsQUFBUSxjQUFFLEFBQUssQUFBRTtBQUVqQixBQUFlLHFCQUFFLEFBQUssTUFBQyxBQUFPLEFBQUM7QUFDL0IsQUFBYSxtQkFBRSxBQUFLLE1BQUMsQUFBTSxRQUFFLEFBQVEsVUFBRSxBQUFNLEFBQUM7QUFDOUMsQUFBYyxvQkFBRSxBQUFLLEFBQUU7QUFFdkIsQUFBYSxtQkFBRSxBQUFLLEFBQUU7QUFDdEIsQUFBYyxvQkFBRSxBQUFLLEFBQUU7QUFDdkIsQUFBYSxtQkFBRSxBQUFLLEFBQUU7QUFDdEIsQUFBVyxpQkFBRSxBQUFLLEFBQUU7QUFDcEIsQUFBZ0Isc0JBQUUsQUFBSyxBQUFFO0FBRXpCLEFBQUksVUFBRSxBQUFLLE1BQUMsQUFBTyxBQUFDO0FBQ3BCLEFBQVEsY0FBRSxBQUFLLE1BQUMsQUFBTyxBQUFDLEFBQ3pCLEFBQUM7QUF4QmtCO0FBMEJwQixlQUFlLEFBQVcsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR1cGxlKCk6IG5ldmVyW107XG5mdW5jdGlvbiB0dXBsZTxUIGV4dGVuZHMgc3RyaW5nW10+KC4uLmFyZ3M6IFQpOiBUO1xuZnVuY3Rpb24gdHVwbGU8VD4oLi4uYXJnczogVFtdKTogVFtdIHtcbiAgcmV0dXJuIGFyZ3M7XG59XG5cbi8vIGVuc3VyZSBzdGF5cyBpbiBzeW5jIHdpdGggdHlwaW5nXG4vLyBQYXJlbnROb2RlIGFuZCBDaGlsZEtleSB0eXBlcyBhcmUgZGVyaXZlZCBmcm9tIFZpc2l0b3JLZXlzTWFwXG5jb25zdCB2aXNpdG9yS2V5cyA9IHtcbiAgUHJvZ3JhbTogdHVwbGUoJ2JvZHknKSxcbiAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHR1cGxlKCdwYXRoJywgJ3BhcmFtcycsICdoYXNoJyksXG4gIEJsb2NrU3RhdGVtZW50OiB0dXBsZSgncGF0aCcsICdwYXJhbXMnLCAnaGFzaCcsICdwcm9ncmFtJywgJ2ludmVyc2UnKSxcbiAgRWxlbWVudE1vZGlmaWVyU3RhdGVtZW50OiB0dXBsZSgncGF0aCcsICdwYXJhbXMnLCAnaGFzaCcpLFxuICBQYXJ0aWFsU3RhdGVtZW50OiB0dXBsZSgnbmFtZScsICdwYXJhbXMnLCAnaGFzaCcpLFxuICBDb21tZW50U3RhdGVtZW50OiB0dXBsZSgpLFxuICBNdXN0YWNoZUNvbW1lbnRTdGF0ZW1lbnQ6IHR1cGxlKCksXG4gIEVsZW1lbnROb2RlOiB0dXBsZSgnYXR0cmlidXRlcycsICdtb2RpZmllcnMnLCAnY2hpbGRyZW4nLCAnY29tbWVudHMnKSxcbiAgQXR0ck5vZGU6IHR1cGxlKCd2YWx1ZScpLFxuICBUZXh0Tm9kZTogdHVwbGUoKSxcblxuICBDb25jYXRTdGF0ZW1lbnQ6IHR1cGxlKCdwYXJ0cycpLFxuICBTdWJFeHByZXNzaW9uOiB0dXBsZSgncGF0aCcsICdwYXJhbXMnLCAnaGFzaCcpLFxuICBQYXRoRXhwcmVzc2lvbjogdHVwbGUoKSxcblxuICBTdHJpbmdMaXRlcmFsOiB0dXBsZSgpLFxuICBCb29sZWFuTGl0ZXJhbDogdHVwbGUoKSxcbiAgTnVtYmVyTGl0ZXJhbDogdHVwbGUoKSxcbiAgTnVsbExpdGVyYWw6IHR1cGxlKCksXG4gIFVuZGVmaW5lZExpdGVyYWw6IHR1cGxlKCksXG5cbiAgSGFzaDogdHVwbGUoJ3BhaXJzJyksXG4gIEhhc2hQYWlyOiB0dXBsZSgndmFsdWUnKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHZpc2l0b3JLZXlzO1xuXG5leHBvcnQgdHlwZSBWaXNpdG9yS2V5c01hcCA9IHR5cGVvZiB2aXNpdG9yS2V5cztcbiJdfQ==