import visitorKeys from '../types/visitor-keys';
import { cannotRemoveNode, cannotReplaceNode, cannotReplaceOrRemoveInKeyHandlerYet } from './errors';
function getEnterFunction(handler) {
    return typeof handler === 'function' ? handler : handler.enter;
}
function getExitFunction(handler) {
    return typeof handler !== 'function' ? handler.exit : undefined;
}
function getKeyHandler(handler, key) {
    var keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;
    if (keyVisitor === undefined) return;
    var keyHandler = keyVisitor[key];
    if (keyHandler !== undefined) {
        // widen specific key to all keys
        return keyHandler;
    }
    return keyVisitor.All;
}
function getNodeHandler(visitor, nodeType) {
    var handler = visitor[nodeType];
    if (handler !== undefined) {
        // widen specific Node to all nodes
        return handler;
    }
    return visitor.All;
}
function visitNode(visitor, node) {
    var handler = getNodeHandler(visitor, node.type);
    var enter = void 0;
    var exit = void 0;
    if (handler !== undefined) {
        enter = getEnterFunction(handler);
        exit = getExitFunction(handler);
    }
    var result = void 0;
    if (enter !== undefined) {
        result = enter(node);
    }
    if (result !== undefined && result !== null) {
        if (JSON.stringify(node) === JSON.stringify(result)) {
            result = undefined;
        } else if (Array.isArray(result)) {
            visitArray(visitor, result);
            return result;
        } else {
            return visitNode(visitor, result) || result;
        }
    }
    if (result === undefined) {
        var keys = visitorKeys[node.type];
        for (var i = 0; i < keys.length; i++) {
            // we know if it has child keys we can widen to a ParentNode
            visitKey(visitor, handler, node, keys[i]);
        }
        if (exit !== undefined) {
            result = exit(node);
        }
    }
    return result;
}
function visitKey(visitor, handler, node, key) {
    var value = node[key];
    if (!value) {
        return;
    }
    var keyEnter = void 0;
    var keyExit = void 0;
    if (handler !== undefined) {
        var keyHandler = getKeyHandler(handler, key);
        if (keyHandler !== undefined) {
            keyEnter = getEnterFunction(keyHandler);
            keyExit = getExitFunction(keyHandler);
        }
    }
    if (keyEnter !== undefined) {
        if (keyEnter(node, key) !== undefined) {
            throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
        }
    }
    if (Array.isArray(value)) {
        visitArray(visitor, value);
    } else {
        var result = visitNode(visitor, value);
        if (result !== undefined) {
            assignKey(node, key, result);
        }
    }
    if (keyExit !== undefined) {
        if (keyExit(node, key) !== undefined) {
            throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
        }
    }
}
function visitArray(visitor, array) {
    for (var i = 0; i < array.length; i++) {
        var result = visitNode(visitor, array[i]);
        if (result !== undefined) {
            i += spliceArray(array, i, result) - 1;
        }
    }
}
function assignKey(node, key, result) {
    if (result === null) {
        throw cannotRemoveNode(node[key], node, key);
    } else if (Array.isArray(result)) {
        if (result.length === 1) {
            node[key] = result[0];
        } else {
            if (result.length === 0) {
                throw cannotRemoveNode(node[key], node, key);
            } else {
                throw cannotReplaceNode(node[key], node, key);
            }
        }
    } else {
        node[key] = result;
    }
}
function spliceArray(array, index, result) {
    if (result === null) {
        array.splice(index, 1);
        return 0;
    } else if (Array.isArray(result)) {
        array.splice.apply(array, [index, 1].concat(result));
        return result.length;
    } else {
        array.splice(index, 1, result);
        return 1;
    }
}
export default function traverse(node, visitor) {
    visitNode(visitor, node);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,