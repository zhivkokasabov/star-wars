import { ensureGuid } from './guid';
export function dict() {
    return Object.create(null);
}
export class DictSet {
    constructor() {
        this.dict = dict();
    }
    add(obj) {
        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;
        return this;
    }
    delete(obj) {
        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
    }
}
export class Stack {
    constructor() {
        this.stack = [];
        this.current = null;
    }
    get size() {
        return this.stack.length;
    }
    push(item) {
        this.current = item;
        this.stack.push(item);
    }
    pop() {
        let item = this.stack.pop();
        let len = this.stack.length;
        this.current = len === 0 ? null : this.stack[len - 1];
        return item === undefined ? null : item;
    }
    isEmpty() {
        return this.stack.length === 0;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci91dGlsL2xpYi9jb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFPLFNBQVcsQUFBVSxBQUFFLGtCQUFNLEFBQVEsQUFBQztBQVk3QyxBQUFNLGdCQUFVLEFBQUk7QUFDbEIsV0FBTyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQUksQUFBQyxBQUFDLEFBQzdCO0FBQUM7QUFJRCxBQUFNLGFBQU8sQUFBTztBQUdsQjtBQUNFLEFBQUksYUFBQyxBQUFJLE9BQUcsQUFBSSxBQUFLLEFBQUMsQUFDeEI7QUFBQztBQUVELEFBQUcsUUFBQyxBQUFNO0FBQ1IsWUFBSSxPQUFPLEFBQUcsUUFBSyxBQUFRLFVBQUUsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFVLEFBQUMsT0FBRyxBQUFHLEFBQUMsU0FDcEQsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFVLFdBQUMsQUFBVSxBQUFDLEFBQUMsUUFBRyxBQUFHLEFBQUM7QUFDN0MsZUFBTyxBQUFJLEFBQUMsQUFDZDtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQU07QUFDWCxZQUFJLE9BQU8sQUFBRyxRQUFLLEFBQVEsVUFBRSxPQUFPLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBVSxBQUFDLEFBQUMsVUFDckQsSUFBSyxBQUFXLElBQUMsQUFBSyxPQUFFLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBRSxBQUFXLElBQUMsQUFBSyxBQUFDLEFBQUMsQUFDcEU7QUFBQyxBQUNGOztBQUVELEFBQU0sYUFBTyxBQUFLO0FBQWxCO0FBQ1UsYUFBSyxRQUFRLEFBQUUsQUFBQztBQUNqQixhQUFPLFVBQWMsQUFBSSxBQUFDLEFBc0JuQztBQUFDO0FBcEJDLFFBQVcsQUFBSTtBQUNiLGVBQU8sQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFNLEFBQUMsQUFDM0I7QUFBQztBQUVELEFBQUksU0FBQyxBQUFPO0FBQ1YsQUFBSSxhQUFDLEFBQU8sVUFBRyxBQUFJLEFBQUM7QUFDcEIsQUFBSSxhQUFDLEFBQUssTUFBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUMsQUFDeEI7QUFBQztBQUVELEFBQUc7QUFDRCxZQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUcsQUFBRSxBQUFDO0FBQzVCLFlBQUksQUFBRyxNQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxBQUFDO0FBQzVCLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBRyxRQUFLLEFBQUMsQUFBQyxBQUFDLElBQUMsQUFBSSxBQUFDLEFBQUMsT0FBQyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUcsTUFBRyxBQUFDLEFBQUMsQUFBQztBQUV0RCxlQUFPLEFBQUksU0FBSyxBQUFTLEFBQUMsQUFBQyxZQUFDLEFBQUksQUFBQyxBQUFDLE9BQUMsQUFBSSxBQUFDLEFBQzFDO0FBQUM7QUFFRCxBQUFPO0FBQ0wsZUFBTyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQU0sV0FBSyxBQUFDLEFBQUMsQUFDakM7QUFBQyxBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFzR3VpZCwgZW5zdXJlR3VpZCB9IGZyb20gJy4vZ3VpZCc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICcuL3BsYXRmb3JtLXV0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBEaWN0PFQ+IHtcbiAgW2luZGV4OiBzdHJpbmddOiBUO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNldDxUPiB7XG4gIGFkZCh2YWx1ZTogVCk6IFNldDxUPjtcbiAgZGVsZXRlKHZhbHVlOiBUKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpY3Q8VD4oKTogRGljdDxUPiB7XG4gIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG5leHBvcnQgdHlwZSBTZXRNZW1iZXIgPSBIYXNHdWlkIHwgc3RyaW5nO1xuXG5leHBvcnQgY2xhc3MgRGljdFNldDxUIGV4dGVuZHMgU2V0TWVtYmVyPiBpbXBsZW1lbnRzIFNldDxUPiB7XG4gIHByaXZhdGUgZGljdDogRGljdDxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRpY3QgPSBkaWN0PFQ+KCk7XG4gIH1cblxuICBhZGQob2JqOiBUKTogU2V0PFQ+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHRoaXMuZGljdFtvYmogYXMgYW55XSA9IG9iajtcbiAgICBlbHNlIHRoaXMuZGljdFtlbnN1cmVHdWlkKG9iaiBhcyBhbnkpXSA9IG9iajtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRlbGV0ZShvYmo6IFQpIHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIGRlbGV0ZSB0aGlzLmRpY3Rbb2JqIGFzIGFueV07XG4gICAgZWxzZSBpZiAoKG9iaiBhcyBhbnkpLl9ndWlkKSBkZWxldGUgdGhpcy5kaWN0WyhvYmogYXMgYW55KS5fZ3VpZF07XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0YWNrPFQ+IHtcbiAgcHJpdmF0ZSBzdGFjazogVFtdID0gW107XG4gIHB1YmxpYyBjdXJyZW50OiBPcHRpb248VD4gPSBudWxsO1xuXG4gIHB1YmxpYyBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGg7XG4gIH1cblxuICBwdXNoKGl0ZW06IFQpIHtcbiAgICB0aGlzLmN1cnJlbnQgPSBpdGVtO1xuICAgIHRoaXMuc3RhY2sucHVzaChpdGVtKTtcbiAgfVxuXG4gIHBvcCgpOiBPcHRpb248VD4ge1xuICAgIGxldCBpdGVtID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICBsZXQgbGVuID0gdGhpcy5zdGFjay5sZW5ndGg7XG4gICAgdGhpcy5jdXJyZW50ID0gbGVuID09PSAwID8gbnVsbCA6IHRoaXMuc3RhY2tbbGVuIC0gMV07XG5cbiAgICByZXR1cm4gaXRlbSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGl0ZW07XG4gIH1cblxuICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrLmxlbmd0aCA9PT0gMDtcbiAgfVxufVxuIl19